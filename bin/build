#!/usr/bin/env node

// I tried building a concatenation step in Grunt, but it ended up being more complex than just writing it myself
var fs = require('fs');
var path = require('path');
// var validateJson = require('./validate').validateJson;
var cleanCSS = require('clean-css');
var UglifyJS = require('uglify-js');
var yargs = require('yargs');

var ideTemplate = fs.readFileSync('template/ide.html', 'utf8');
var runtimeTemplate = fs.readFileSync('template/runtime.html', 'utf8');
var styles = ['workspace', 'layout', 'blocks', 'menu', 'fonts/fontawesome'];
var scripts_pre = ['queryparams', 'util', 'event', 'drag', 'uuid', 'block', 'file', 'undo', 'ui', 'blockprefs', 'menu', 'code_map'];
var scripts_post = ['l10n', 'workspace'];

var localizations = {

};

var languages = fs.readdirSync('languages');

var config = {}; 
languages.forEach(function(lang){
    config[lang] = JSON.parse(fs.readFileSync('languages/' + lang + '/config.json'));
});

function clear(){
    if (fs.existsSync('dist')){
        var files = fs.readdirSync('dist');
        files.forEach(function(filename){
            fs.unlinkSync(path.join('dist', filename));
        });
    }else{
        fs.mkdirSync('dist');
    }
};

function append(str, dest){
    fs.appendFileSync(dest, str);
}


function cat(src, dest){
    if (!fs.existsSync(src))
        return;
    fs.appendFileSync(dest, '\n/*begin ' + path.basename(src).replace(/\\/g, '/') + '*/\n');
    fs.appendFileSync(dest, fs.readFileSync(src, 'utf8'));
    fs.appendFileSync(dest, '\n/*end ' + path.basename(src).replace(/\\/g, '/') + '*/\n');
}

function endswith(str, suffix){
    return RegExp(suffix + '$').test(str);
}

function concat(src, dest, files, ext, suffix, before, after){
    before = before || '';
    after = after || '';
    suffix = suffix || '';
    var contents, rawContents;
    files.forEach(function(pathname){
        var filename = path.join(src, pathname) + suffix + ext;
        try{
            rawContents = fs.readFileSync(path.join(filename), 'utf8');
            contents = before + rawContents + after;
        }catch(e){
            // console.log('file %s not found', path.join(filename));
            // console.log('Could not read %s: %s', path.join(filename), e.message);
            return;
        }
        if (ext === '.json'){
            if (!validateJson(filename, rawContents)) return;
        }
        fs.appendFileSync(dest, '\n/*begin ' + filename.replace(/\\/g, '/') + '*/\n');
        fs.appendFileSync(dest, contents);
        fs.appendFileSync(dest, '\n/*end ' + filename.replace(/\\/g, '/') + '*/\n');
    });
}

// function build(){
//     clear();
//     var errors = false;
//     var stylefiles = {};
//     Object.keys(plugins).forEach(function(lang){
//         console.log(" == "+lang+" == ");
//         var files = plugins[lang];
//         var src = path.join('languages', lang);
//         var dest = path.join('dist', lang);
//         if (typeof libs[lang] != "undefined") {
//             libs[lang].forEach(function(libname){cat('lib/' + libname + '.js', dest + '.js'); });
//         }
//         if (typeof styles[lang] == "undefined") {
//             console.error("No styles are included. Please check the styles array.");
//             console.error(" == "+lang+" FAILED == ");
//             errors = true;
//             return -1;
//         }
//         styles[lang].concat(styles)
//             .map(function(stylename){ return 'stylesheets/' + stylename + '.css';})
//             .forEach(function(stylename){cat(stylename, dest + '.css'); });

//         // Add localization file string
//         fileStr = "\n\n/* list of files used for localization of blocks */\nvar l10nFiles = " + JSON.stringify(localizations) + ";\n\n";
//         append(fileStr, dest + '.js');

//         scripts.forEach(function(scriptname){
//             cat('scripts/' + scriptname + '.js', dest + '.js'); 
//         });

//         // Build CSS
//         concat(src, dest + '.css', files, '.css');

//         // Build Waterbear support
//         concat(src, dest + '.js', files, '.js');

//         // Build Waterbear blocks
//         concat(src, dest + '.js', files, '.json', null, 'wb.menu(', ');');

//         // Attach l10n file to end of javascript dist
//         cat('scripts/' + 'l10n' + '.js', dest + '.js'); 

//         // Build runtime support
//         if (lang === 'javascript' || lang === 'processingjs'){
//             pluginlibs[lang].forEach(function(libname){cat('lib/' + libname + '.js', dest + '_runtime.js'); })
//             concat(src, dest + '_runtime.js', files, '.js', '_runtime');
//         }
//     });
//    buildHtmlFiles();
// }

function examples(lang){
    var _examples = "";
    var tplExamplePath = 'languages/' + lang + '/templates/examples.html';
    if (fs.existsSync(tplExamplePath)) {
        _examples = fs.readFileSync(tplExamplePath);
    }
    else {
        console.warn("Example template file for %s located at %s is missing. Defaulting to ''.", lang, tplExamplePath);
    }
    return _examples;
}

function stage(lang){
    var tplStagePath = 'languages/' + lang + '/templates/stage.html';
    // initialize default for fallback
    var _stage = fs.readFileSync('languages/javascript/templates/stage.html');
    if (fs.existsSync(tplStagePath)) {
        _stage = fs.readFileSync(tplStagePath);
    }
    else {
        console.warn("Stage template file for %s located at %s is missing. Defaulting to javascript's template.", lang, tplStagePath);
    }
    return _stage;
}

function cssInclude(path){
    return '<link rel="stylesheet" href="' + path + '.css" >';
}

function cssIncludes(lang){
    var includes = [];
    styles.forEach(function(styleName){
        includes.push(cssInclude('../../stylesheets/' + styleName));
    });
    config[lang].styles.forEach(function(styleName){
        includes.push(cssInclude('../../stylesheets/' + styleName));
    });
    includes.push(cssInclude(lang));
    config[lang].plugins.forEach(function(plugin){
        includes.push(cssInclude('blocks/' + plugin));
    });
    return includes.join('\n');
}

function jsInclude(path){
    return '<script src="' + path + '.js"></script>';
}

function jsIdeIncludes(lang){
    var includes = [];
    config[lang].ideLibs.forEach(function(scriptName){
        includes.push(jsInclude('../../lib/' + scriptName));
    });
    scripts_pre.forEach(function(scriptName){
        includes.push(jsInclude('../../scripts/' + scriptName));
    });
    includes.push(jsInclude('ide'));
    config[lang].plugins.forEach(function(plugin){
        includes.push(jsInclude('blocks/' + plugin + '_ide'));
    });
    config[lang].plugins.forEach(function(plugin){
        includes.push(jsInclude('blocks/' + plugin + '_blockmenu'));
    });
    scripts_post.forEach(function(scriptName){
        includes.push(jsInclude('../../scripts/' + scriptName));
    });
    return includes.join('\n');
}

function jsRuntimeIncludes(lang){
    var includes = [jsInclude('runtime')];
    config[lang].plugins.forEach(function(plugin){
        includes.push(jsInclude('blocks/' + plugin + '_runtime'));
    });
    config[lang].runtimeLibs.forEach(function(libName){
        includes.push(jsInclude('../../lib/' + libName));
    });
    return includes.join('\n');
}

function buildHtmlFiles(){
    buildIdeHtmlFiles();
    buildRuntimeHtmlFiles();
}

function buildIdeHtmlFiles(){
    languages.forEach(function(lang){
        // Build HTML file
        var html = ideTemplate.replace(/<\?examples\?>/g, examples(lang))
                               .replace(/<\?stage\?>/g, stage(lang))
                               .replace(/<\?cssincludes\?>/g, cssIncludes(lang))
                               .replace(/<\?jsincludes\?>/g, jsIdeIncludes(lang))
                               .replace(/<\?language\?>/g, lang);
        fs.writeFileSync('languages/' + lang + '/index.html', html, 'utf8')
    });
};

function buildRuntimeHtmlFiles(){
    languages.forEach(function(lang){
        if (config[lang].runsInBrowser){
            var html = runtimeTemplate.replace(/<\?jsincludes\?>/g, jsRuntimeIncludes(lang));
            fs.writeFileSync('languages/' + lang + '/runtime.html', html, 'utf8');
        }
    });
}

// build();
buildHtmlFiles();
